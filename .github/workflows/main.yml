# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  SA_EMAIL: githubactionkey@unitykubernetesbuilder.iam.gserviceaccount.com
  GKE_ZONE: 'us-central1-c'
  GKE_REGION: 'us-central1'
  GKE_PROJECT: 'unitykubernetesbuilder'
  GKE_CLUSTER: 'download-volume-cluster'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '288.0.0'
        service_account_email: ${{ secrets.SA_EMAIL }}
        service_account_key: ${{ secrets.GCLOUD_AUTH }}
    - name: Get Gist
      id: get
      uses: andymckay/get-gist-action@master
      with:
        gistURL: "https://gist.github.com/frostebite/58fdeb02d45f6e7a24bcbe36f6bdc051" 
    - id: read-k8s-config
      run: |
        chmod +x ${{ steps.get.outputs.file }}
        ${{ steps.get.outputs.file }} ${{ env.GKE_PROJECT }} ${{ env.GKE_CLUSTER }} ${{ env.GKE_ZONE }}
        gcloud container clusters get-credentials ${{env.GKE_CLUSTER}} --zone $GKE_ZONE --project $GKE_PROJECT
        # run a command to get access-token
        kubectl version
        PVC_ID=$(cat /proc/sys/kernel/random/uuid)
        echo "::set-output name=PVC_ID::$PVC_ID"
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: $PVC_ID
        spec:
          accessModes:
            ['ReadWriteOnce']
          volumeMode:
            'Filesystem'
          resources:
            requests:
              storage: '1Gi'
        EOF
        sleep 10s
        cat <<EOF | kubectl apply -f -
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: $PVC_ID-populate
          labels:
            app: k8s-download
        spec:
          template:
            spec:
              volumes:
              - name: data
                persistentVolumeClaim:
                  claimName: $PVC_ID
              restartPolicy: Never
              containers:
              - name: download-pv
                image: alpine:latest
                command: ['/bin/sh']
                args:
                  ['-c', 'mkdir -p /data/repo; echo "test" > /data/repo/test.txt']
                volumeMounts:
                - name: data
                  mountPath: /data
              restartPolicy: Never
        EOF
        kubectl wait --for=condition=complete --timeout=120s job/$PVC_ID-populate
    - uses: frostebite/File-To-Base64@master
      id: read-base64
      with: 
        filePath: ~/.kube/config
    - uses: ./
      with:
        kubeConfig: ${{ steps.read-base64.outputs.base64 }}
        volume: ${{ steps.read-k8s-config.outputs.PVC_ID }}
        sourcePath: repo/
    - run: |
        cd k8s-volume-download
        content=$(cat test.txt)
        if [ "$content" == "test" ]; then exit 0; else exit 1; fi
    - run: |
        kubectl delete job/${{ steps.read-k8s-config.outputs.PVC_ID }}-populate
        kubectl delete persistentvolumeclaim/${{ steps.read-k8s-config.outputs.PVC_ID }}
        pods=$(kubectl get pods -o json | jq '.items | .[].metadata.labels' | jq 'select("app", "k8s-download")')
        if [ -z pods ]; then gcloud container clusters delete ${{env.GKE_CLUSTER}} --zone $GKE_ZONE --project $GKE_PROJECT --quiet; fi
      if: ${{ always() }}
